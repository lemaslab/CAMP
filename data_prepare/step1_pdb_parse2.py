import pandas as pd
import numpy as np

# Step1 : Load all PDB ids that might contain peptide interaction and plip prediction results
# INPUT : pdb_pep_chain from Step 0 & analyzed file generated by PLIP (placed under ./peptide_result/). There is an example of PLIP result file called example_PLIP_result.txt)
# OUTPUT: plip_predict_result

def load(pdb_pep_dataset,plip_result_filename): #pdb_pep_chain   #plip_predict_result
	df_fasta_pep = pd.read_csv(pdb_pep_dataset,sep='\t',header = 0) 
	df_fasta_pep=df_fasta_pep.reset_index(drop=True)
	df_predict = pd.DataFrame(columns=['pdb_id','pep_chain','predicted_chain'])

	for i in range(df_fasta_pep.shape[0]):
	    pdb_id = df_fasta_pep['PDB_id'][i]
	    chain = df_fasta_pep['chain'][i]
	    result_file_name = './peptide_result/'+pdb_id + '_'+chain+'_result.txt'
	    #print(result_file_name)
	    try:
	        for line in open(result_file_name):
	            if line.startswith('Interacting chain(s):'):
	                df_predict.loc[i] = [pdb_id,chain, str(line).replace('\n','')\
	                                     .replace('\r','')\
	                                     .replace('Interacting chain(s):','')
	                                     .lower()]
	        if i % 5000 == 0:
	            print('already finished files',i)
	    except :
	        #print('find no file for',pdb_id)
	        #print(i,pdb_id,line)
	        pass
	print('finish loading!')
	print('-----------------------------------------------------')
	#print(df_predict.info())
	df_predict['predicted_chain_num'] = df_predict.predicted_chain.apply(lambda x :len(x.replace(' ','')) )
	df_predict = df_predict.loc[df_predict.predicted_chain_num>0]
	df_predict = df_predict.drop('predicted_chain_num',axis = 1)
	df_predict['predicted_chain'] = df_predict.predicted_chain.apply(lambda x :\
	                                      x.replace(' ',''))
	df_predict['pep_chain'] = df_predict.pep_chain.apply(lambda x :\
	                                      x.replace(' ',''))
	df_predict = df_predict.reset_index(drop=True)
	print('finish removing PDB ids without any interaction')
	print('-----------------------------------------------------')
	df_predict.predicted_chain = df_predict.predicted_chain.apply(lambda x: x.split(','))
	lst_col = 'predicted_chain'
	df1 = pd.DataFrame({col:np.repeat(df_predict[col].values, df_predict[lst_col].str.len())
	              for col in df_predict.columns.difference([lst_col])
	            }).assign(**{lst_col:np.concatenate(df_predict[lst_col].values)})[df_predict.columns.tolist()]
	df_predict = df1
	# save organized data formatted like (pdb,pep_chain,predicted_prot_chain)
	file_name = plip_result_filename
	df_predict.to_csv(file_name, encoding='utf-8', index=False, sep='\t')
	print('finish exploding comma-seperated predicted chain, successfully saved records:',df_predict.shape[0])

	print('Step 1 is finished by generating the PLIP prediction file : plip_predict_result. ')

	return df_predict
	
df_predict = load('pdb_pep_chain','plip_predict_result')
